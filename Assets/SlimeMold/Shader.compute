// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Update
#pragma kernel Process

struct Agent {
    float2 position;
    float angle;
    float4 color;
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<Agent> agents;
RWTexture2D<float4> Texture;
RWTexture2D<float4> FadedTexture;
RWTexture2D<float4> Final;

uint height;
uint width;
uint radius;
uint numAgents;
float moveSpeed;
float deltaTime;
float PI;

float evaporateSpeed;
float diffuseSpeed;
float turnSpeed;

float sensorAngleSpacing;
float sensorOffsetDist;
float sensorSize;

float4 color1;
float4 color2;
float4 color3;


uint hash(uint state){
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float scaleToRange01(uint num){
    return (float)num / (float)4294967295.0;
}

float sense(Agent agent, float sensorAngleOffset){
    float sensorAngle = agent.angle + sensorAngleOffset;
    float2 sensorDir = float2(cos(sensorAngle), sin(sensorAngle));
    int2 sensorCenter = agent.position + sensorDir * sensorOffsetDist;
    float4 sum = 0;


    for (int offsetX = -sensorSize; offsetX <= sensorSize; offsetX++){
        for (int offsetY = -sensorSize; offsetY <= sensorSize; offsetY++){
            int2 pos = sensorCenter + int2(offsetX, offsetY);
            if (pos.x >= 0 && pos.x < width && pos.y >= 0 && pos.y < height){
                sum += Texture[pos].x + Texture[pos].y + Texture[pos].z;
            }
        }
    }

    return sum;
}

float magnitude(float4 color){
    return max(color.x, max(color.y, color.z));
}




[numthreads(10,10,1)]
void Update (uint3 id : SV_DispatchThreadID)
{

    if (id.y * width + id.x >= numAgents){ return; }

    Agent agent = agents[id.y * width + id.x];
    uint random = hash(agent.position.y * width + agent.position.x);
    float rand = random / 4294967295.0;
    
    
    // Sensory inputs
        float weightForward = sense(agent, 0);
        float weightLeft = sense(agent, sensorAngleSpacing);
        float weightRight = sense(agent, -sensorAngleSpacing);

        float randomSteerStrength = scaleToRange01(random);
        float4 origColor = agents[id.y * width + id.x].color;
        
        if (weightForward > weightLeft && weightForward > weightRight){
            agents[id.y * width + id.x].angle += 0;
            agents[id.y * width + id.x].color = lerp(origColor, color1, deltaTime);
        }
        else if (weightForward < weightLeft && weightForward < weightRight){
            agents[id.y * width + id.x].angle += (randomSteerStrength - 0.5) * 2 * turnSpeed * deltaTime;
        }
        else if (weightRight > weightLeft){
            agents[id.y * width + id.x].angle -= randomSteerStrength * turnSpeed * deltaTime;
            agents[id.y * width + id.x].color = lerp(origColor, color2, deltaTime);
        }
        else if (weightRight < weightLeft){
            agents[id.y * width + id.x].angle += randomSteerStrength * turnSpeed * deltaTime;
            agents[id.y * width + id.x].color = lerp(origColor, color3, deltaTime);
        } 
    
    //

    // Update position
        float2 direction = float2(cos(agent.angle), sin(agent.angle));
        float2 newPos = agents[id.y * width + id.x].position + direction * moveSpeed * deltaTime;

        if (newPos.x <= 0 || newPos.x >= width || newPos.y <= 0 || newPos.y >= height){
            agents[id.y * width + id.x].angle = rand * 2 * PI;
            newPos.x = min(width - 1, max(1, newPos.x));
            newPos.y = min(height - 1, max(1, newPos.y));
        }

        agents[id.y * width + id.x].position = newPos;
        
        Texture[agents[id.y * width + id.x].position] = agents[id.y * width + id.x].color;
    //
}

[numthreads(10,10,1)]
void Process(uint3 id : SV_DispatchThreadID){

    
    if (id.x < 0 || id.x > width || id.y < 0 || id.y >= height){
        return;
    }

    float4 orig = Texture[id.xy];

    float4 sum = 0;
    for (int offsetX = -1; offsetX <= 1; offsetX++){
        for (int offsetY = -1; offsetY <= 1; offsetY ++){
            int sampleX = id.x + offsetX;
            int sampleY = id.y + offsetY;

            if (sampleX >= 0 && sampleX < width && sampleY >= 0 && sampleY < height){
                sum += FadedTexture[int2(sampleX, sampleY)];
            }
        }
    }

    float4 blurResult = sum / 9;
    float4 diffuse = lerp(orig, min(1, blurResult), diffuseSpeed * deltaTime);
    float4 evap = max(0, diffuse - evaporateSpeed * deltaTime);
    FadedTexture[id.xy] = evap;
    
}